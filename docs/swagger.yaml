basePath: /v1
definitions:
  main.CreateCommentForPostPayload:
    properties:
      content:
        maxLength: 1000
        minLength: 3
        type: string
      user_id:
        type: integer
    required:
    - content
    - user_id
    type: object
  main.CreateCommentForPostResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user_id:
        type: integer
    type: object
  main.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        minLength: 3
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - content
    - tags
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 250
        type: string
      password:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.FollowedPayload:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  main.HealthResponse:
    properties:
      environment:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 250
        type: string
      password:
        maxLength: 50
        minLength: 6
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        minLength: 3
        type: string
      title:
        maxLength: 100
        minLength: 3
        type: string
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      token:
        type: string
      username:
        type: string
    required:
    - token
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
info:
  contact:
    email: longlnofficial@gmail.com
    name: LongLN
    url: http://www.swagger.io/support
  description: API for GopherSocial, a social network for gophers.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GopherSocial API
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a new token for the user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created token
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided username, email, and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Registered user
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user
      tags:
      - authentication
  /health:
    get:
      description: Healthcheck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.HealthResponse'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Healthcheck
      tags:
      - healthcheck
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a new post with the provided title, content, and tags
      parameters:
      - description: Post creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created post
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Deletes a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieves a post by ID including its comments
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post with comments
          schema:
            $ref: '#/definitions/store.Post'
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get post details
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Updates a post's title and/or content
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: Post update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a post
      tags:
      - posts
  /posts/{postID}/comments:
    post:
      consumes:
      - application/json
      description: Creates a new comment for a specific post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: Comment creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.CreateCommentForPostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created comment
          schema:
            $ref: '#/definitions/main.CreateCommentForPostResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a comment
      tags:
      - comments
  /posts/feed:
    get:
      consumes:
      - application/json
      description: Retrieves posts for a user's feed with pagination
      parameters:
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: desc
        description: Sort order (asc or desc)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Feed posts
          schema:
            items:
              $ref: '#/definitions/store.Post'
            type: array
        "400":
          description: Invalid pagination parameters
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user feed
      tags:
      - feed
      - posts
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/store.User'
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user details
      tags:
      - users
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Creates a follow relationship between the authenticated user and
        target user
      parameters:
      - description: Follower User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: User to follow
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.FollowedPayload'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid request payload
          schema:
            type: string
        "409":
          description: Already following this user
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Follow a user
      tags:
      - users
      - follows
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Removes a follow relationship between the authenticated user and
        target user
      parameters:
      - description: Follower User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: User to unfollow
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.FollowedPayload'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Not following this user
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
      - follows
  /users/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activates a user account
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activate a user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and then your token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
